version: '3.8'

# Simplified Farm Management System - Docker Compose
# This version excludes optional services for easier setup

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: farm_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: farmpass123
      MONGO_INITDB_DATABASE: farmmanagement
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - farm_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: farm_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redispass123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - farm_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: farm_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:farmpass123@mongodb:27017/farmmanagement?authSource=admin
      REDIS_URL: redis://:redispass123@redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production-min-32-chars
      JWT_EXPIRE: 7d
      BCRYPT_ROUNDS: 12
      CLIENT_URL: http://localhost:3000
      MOBILE_URL: http://localhost:19006
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "5000:5000"
    networks:
      - farm_network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web Frontend
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: production
      args:
        REACT_APP_API_URL: http://localhost:5000
        REACT_APP_ENVIRONMENT: production
        REACT_APP_VERSION: 1.0.0
    container_name: farm_web
    restart: unless-stopped
    ports:
      - "3000:80"
    networks:
      - farm_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  farm_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 